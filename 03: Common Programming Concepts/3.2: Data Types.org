#+title: 3.2: Data Types
+ Every value has a /data type/
+ The type of every value must be known at compile time
  + This can often be inferred by the compiler
  + It has to be manually annotated at certain times:
    #+begin_src rust
    let guess: u32 = "42".parse().expect("Not a number");
    #+end_src
    + The compiler cannot know what type should be parsed without an annotation
* Scalar Types
+ A /scalar type/ is a single value
+ There are 4 primary scalar types:
  1. integers
  2. floating-point numbers
  3. Booleans
  4. characters
** Integer Types
| Length  | Signed | Unsigned |
|---------+--------+----------|
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |
+ /Signed/ variables can be negative whereas /unsigned/ can only be positive
+ Signed numbers can store numbers from -(2^{n-1}) to 2^{n-1}-1
+ Unsigned variables can store numbers from 0 to 2^{n}-1
+ arch variables (=isize=, =usize=) are the size of the system architecture
+ If unsure, =i32= and =u32= good choices
*** Integer Overflow
+ /Integer overflow/ is when a value outside of the range a variable can hold is attempted to be stored inside it
  + For example, a =u8= can store from 0 to 255, so attempting to store 300 in it will cause integer overflow
+ Integer overflow causes a /panic/ at runtime if in *debug* mode
+ In *release* mode, /two's complement wrapping/ is performed, which means that values over the maximum will start from the minimum
  + For example, in a =u8=, the value 256 becomes 0, the value 257 becomes 1, etc.
+ Integer overflow can be explicitly handled
  + Wrapping can be done with the ~wrapping_*~ methods, such as ~wrapping_add~
  + Return =None= if overflow occurs with the ~checked_*~ methods
  + Return a value and a boolean indicating overflow with the ~overflowing_*~ methods
  + Saturate at the value's min/max with the ~saturating_*~ methods
** Floating-Point Types
+ /Floating-point/ numbers are numbers with decimals
| Length | Name |
|--------+------|
| 32-bit | f32  |
| 64-bit | f64  |
+ They are represented according to the IEEE-754 standart
  + =f32= types are single-precision
  + =f64= types are double precision
** Numeric Operations
+ Supported operations:
  + addition
    #+begin_src rust :exports both
let sum = 7 + 10;
println!("sum: {}", sum);
    #+end_src
    #+RESULTS:
    : sum: 15
  + subtraction
     #+begin_src rust :exports both
let difference = 95.5 - 4.3;
println!("difference: {}", difference);
    #+end_src
    #+RESULTS:
    : difference: 91.2
  + multiplication
    #+begin_src rust :exports both
let product = 4* 30;
println!("product: {}", product);
    #+end_src
  + division
    #+begin_src rust :exports both
let quotient = 56.7 / 32.2;
println!("quotient: {}", quotient);
let floored = 2 / 3;
println!("floored: {}", floored);
    #+end_src
    #+RESULTS:
    : quotient: 1.7608695652173911
    : floored: 0
  + remainder
    #+begin_src rust :exports both
let remainder = 43 % 5;
println!("remainder: {}", remainder);
    #+end_src
    #+RESULTS:
    : remainder: 3
** The Boolean Type
+ Type: ~bool~
+ Booleans can be =true= or =false=
+ One byte in size
#+begin_src rust
let true:bool = true;
let false = false;
#+end_src
** The Character Type
+
